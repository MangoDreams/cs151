Starting on 9-19 at 14:33:29

Question q1
===========

*** FAIL: Exception raised: string index out of range
*** 
*** Traceback (most recent call last):
***   File "/home/gsingh/cs151/Project1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/gsingh/cs151/Project1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/gsingh/cs151/Project1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 202, in execute
***     solution, expanded_states, error = self.getSolInfo(search)
***   File "searchTestClasses.py", line 186, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 148, in depthFirstSearch
***     action_list = expand[1]
*** IndexError: string index out of range
*** 

### Question q1: 0/2 ###


Question q2
===========

*** FAIL: Exception raised: string index out of range
*** 
*** Traceback (most recent call last):
***   File "/home/gsingh/cs151/Project1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/gsingh/cs151/Project1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/gsingh/cs151/Project1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 202, in execute
***     solution, expanded_states, error = self.getSolInfo(search)
***   File "searchTestClasses.py", line 186, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 183, in breadthFirstSearch
***     action_list = expand[1]
*** IndexError: string index out of range
*** 

### Question q2: 0/2 ###


Question q3
===========

*** PASS: test_cases/q3/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases/q3/graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
*** FAIL: test_cases/q3/graph_infinite.test
*** 	graph:
*** 	     B <--> C
*** 	     ^     /|
*** 	     |    / |
*** 	     V   /  V
*** 	    *A<-/  [G]
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.
*** 	student solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	student expanded_states:	['A', 'B', 'A', 'C']
*** 
*** 	correct solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	correct expanded_states:	['A', 'B', 'C']
*** 	correct rev_solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	correct rev_expanded_states:	['A', 'B', 'C']
*** FAIL: test_cases/q3/graph_manypaths.test
*** 	graph:
*** 	        B1          E1
*** 	       ^  \        ^  \
*** 	      /    V      /    V
*** 	    *A --> C --> D --> F --> [G]
*** 	      \    ^      \    ^
*** 	       V  /        V  /
*** 	        B2          E2
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.  This graph has multiple
*** 	    paths to the goal, where nodes with the same state 
*** 	    are added to the fringe multiple times before they
*** 	    are expanded.
*** 	student solution:		['0:A->B1', '0:B1->C', '0:C->D', '0:D->E1', '0:E1->F', '0:F->G']
*** 	student expanded_states:	['A', 'B1', 'C', 'B2', 'C', 'D', 'D', 'E1', 'E1', 'F', 'F', 'E2', 'E2', 'F', 'F']
*** 
*** 	correct solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	correct expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** 	correct rev_solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	correct rev_expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** FAIL: test_cases/q3/ucs_0_graph.test
*** 	graph:
*** 	              C
*** 	              ^
*** 	              | 2
*** 	         2    V   4 
*** 	    *A <----> B -----> [H]
*** 	              | 
*** 	         1.5  V  2.5
*** 	     G <----- D -----> E
*** 	              |
*** 	            2 | 
*** 	              V
*** 	             [F]
*** 	    
*** 	    A is the start state, F and H is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	student solution:		['Right', 'Down', 'Down']
*** 	student expanded_states:	['A', 'B', 'D', 'C', 'A', 'G']
*** 
*** 	correct solution:		['Right', 'Down', 'Down']
*** 	correct expanded_states:	['A', 'B', 'D', 'C', 'G']
*** 	correct rev_solution:		['Right', 'Down', 'Down']
*** 	correct rev_expanded_states:	['A', 'B', 'D', 'C', 'G']
*** FAIL: Exception raised: unhashable type: 'list'
*** 
*** Traceback (most recent call last):
***   File "/home/gsingh/cs151/Project1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/gsingh/cs151/Project1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/gsingh/cs151/Project1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 306, in execute
***     solution, expanded, error = self.getSolInfo(search, searchAgents)
***   File "searchTestClasses.py", line 287, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 211, in uniformCostSearch
***     parent[x[0]] = problem.getStartState()
*** TypeError: unhashable type: 'list'
*** 

### Question q3: 0/2 ###


Question q4
===========

*** FAIL: test_cases/q4/astar_0.test
*** 	graph:
*** 	              C
*** 	              ^
*** 	              | 2
*** 	         2    V   4 
*** 	    *A <----> B -----> [H]
*** 	              | 
*** 	         1.5  V  2.5
*** 	     G <----- D -----> E
*** 	              |
*** 	            2 | 
*** 	              V
*** 	             [F]
*** 	    
*** 	    A is the start state, F and H is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	student solution:		['Right', 'Down', 'Down']
*** 	student expanded_states:	['A', 'B', 'D', 'C', 'A', 'G']
*** 
*** 	correct solution:		['Right', 'Down', 'Down']
*** 	correct expanded_states:	['A', 'B', 'D', 'C', 'G']
*** 	correct rev_solution:		['Right', 'Down', 'Down']
*** 	correct rev_expanded_states:	['A', 'B', 'D', 'C', 'G']
*** PASS: test_cases/q4/astar_1_graph_heuristic.test
*** 	solution:		['0', '0', '2']
*** 	expanded_states:	['S', 'A', 'D', 'C']
*** FAIL: Exception raised: unhashable type: 'list'
*** 
*** Traceback (most recent call last):
***   File "/home/gsingh/cs151/Project1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/gsingh/cs151/Project1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/gsingh/cs151/Project1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 306, in execute
***     solution, expanded, error = self.getSolInfo(search, searchAgents)
***   File "searchTestClasses.py", line 285, in getSolInfo
***     solution = alg(problem, heuristic)
***   File "search.py", line 248, in aStarSearch
***     parent[x[0]] = problem.getStartState()
*** TypeError: unhashable type: 'list'
*** 

### Question q4: 0/3 ###


Question q5
===========

*** NOTE: Make sure to complete Question q2 before working on Question q5,
*** because Question q5 builds upon your answer for Question q2.


Question q6
===========

*** NOTE: Make sure to complete Question q4 before working on Question q6,
*** because Question q6 builds upon your answer for Question q4.


Question q7
===========

*** NOTE: Make sure to complete Question q4 before working on Question q7,
*** because Question q7 builds upon your answer for Question q4.


Question q8
===========

[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
*** Method not implemented: findPathToClosestDot at line 503 of searchAgents.py
*** FAIL: Terminated with a string exception.

### Question q8: 0/2 ###


Question extra
==============

*** Method not implemented: getAction at line 559 of searchAgents.py
*** FAIL: test_cases/extra/extra.test
*** 	Extra credit threw an exception: global name 'TimeoutFunctionException' is not defined.
Traceback (most recent call last):
  File "searchTestClasses.py", line 864, in execute
    except TimeoutFunctionException:
NameError: global name 'TimeoutFunctionException' is not defined

*** Tests failed.

### Question extra: 0/0 ###


Finished at 14:33:29

Provisional grades
==================
Question q1: 0/2
Question q2: 0/2
Question q3: 0/2
Question q4: 0/3
Question q5: 0/2
Question q6: 0/3
Question q7: 0/4
Question q8: 0/2
Question extra: 0/0
------------------
Total: 0/20

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

